// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapi.Data;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(CharSheetContext))]
    partial class CharSheetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("webapi.Models.BaseCharacter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CardToken")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("SystemType")
                        .HasColumnType("int");

                    b.Property<int>("UserToken")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserToken");

                    b.ToTable("DNDCharacters");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BASE");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("webapi.Models.DND.AllyAndOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrustLevel")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AllyAndOrganization");
                });

            modelBuilder.Entity("webapi.Models.DND.AttackAndSpellcasting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttackAndSpellcasting");
                });

            modelBuilder.Entity("webapi.Models.DND.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int?>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialProperties")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("webapi.Models.DND.FeatureAndTrait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelRequired")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeatureAndTrait");
                });

            modelBuilder.Entity("webapi.Models.Generics.CharacterAssociation<webapi.Models.DND.AllyAndOrganization>", b =>
                {
                    b.Property<int>("DndCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("AssociableId")
                        .HasColumnType("int");

                    b.HasKey("DndCharacterId", "AssociableId");

                    b.HasIndex("AssociableId");

                    b.ToTable("AllyAndOrganizationAssociations");
                });

            modelBuilder.Entity("webapi.Models.Generics.CharacterAssociation<webapi.Models.DND.AttackAndSpellcasting>", b =>
                {
                    b.Property<int>("DndCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("AssociableId")
                        .HasColumnType("int");

                    b.HasKey("DndCharacterId", "AssociableId");

                    b.HasIndex("AssociableId");

                    b.ToTable("AttacksAndSpellcastingAssociations");
                });

            modelBuilder.Entity("webapi.Models.Generics.CharacterAssociation<webapi.Models.DND.Equipment>", b =>
                {
                    b.Property<int>("DndCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("AssociableId")
                        .HasColumnType("int");

                    b.HasKey("DndCharacterId", "AssociableId");

                    b.HasIndex("AssociableId");

                    b.ToTable("EquipmentAssociations");
                });

            modelBuilder.Entity("webapi.Models.Generics.CharacterAssociation<webapi.Models.DND.FeatureAndTrait>", b =>
                {
                    b.Property<int>("DndCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("AssociableId")
                        .HasColumnType("int");

                    b.HasKey("DndCharacterId", "AssociableId");

                    b.HasIndex("AssociableId");

                    b.ToTable("FeaturesAndTraitsAssociations");
                });

            modelBuilder.Entity("webapi.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("UserToken")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("BaseCharacters");
                });

            modelBuilder.Entity("webapi.Models.DND.DndCharacter", b =>
                {
                    b.HasBaseType("webapi.Models.BaseCharacter");

                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Alignment")
                        .HasColumnType("int");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Backstory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Initiative")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DND");
                });

            modelBuilder.Entity("webapi.Models.BaseCharacter", b =>
                {
                    b.HasOne("webapi.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserToken")
                        .HasPrincipalKey("UserToken")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("webapi.Models.Generics.CharacterAssociation<webapi.Models.DND.AllyAndOrganization>", b =>
                {
                    b.HasOne("webapi.Models.DND.AllyAndOrganization", "Associable")
                        .WithMany("Associations")
                        .HasForeignKey("AssociableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.DND.DndCharacter", "DndCharacter")
                        .WithMany("AllyAndOrganizationAssociations")
                        .HasForeignKey("DndCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Associable");

                    b.Navigation("DndCharacter");
                });

            modelBuilder.Entity("webapi.Models.Generics.CharacterAssociation<webapi.Models.DND.AttackAndSpellcasting>", b =>
                {
                    b.HasOne("webapi.Models.DND.AttackAndSpellcasting", "Associable")
                        .WithMany("Associations")
                        .HasForeignKey("AssociableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.DND.DndCharacter", "DndCharacter")
                        .WithMany("AttacksAndSpellcastingAssociations")
                        .HasForeignKey("DndCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Associable");

                    b.Navigation("DndCharacter");
                });

            modelBuilder.Entity("webapi.Models.Generics.CharacterAssociation<webapi.Models.DND.Equipment>", b =>
                {
                    b.HasOne("webapi.Models.DND.Equipment", "Associable")
                        .WithMany("Associations")
                        .HasForeignKey("AssociableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.DND.DndCharacter", "DndCharacter")
                        .WithMany("EquipmentAssociations")
                        .HasForeignKey("DndCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Associable");

                    b.Navigation("DndCharacter");
                });

            modelBuilder.Entity("webapi.Models.Generics.CharacterAssociation<webapi.Models.DND.FeatureAndTrait>", b =>
                {
                    b.HasOne("webapi.Models.DND.FeatureAndTrait", "Associable")
                        .WithMany("Associations")
                        .HasForeignKey("AssociableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.DND.DndCharacter", "DndCharacter")
                        .WithMany("FeaturesAndTraitsAssociations")
                        .HasForeignKey("DndCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Associable");

                    b.Navigation("DndCharacter");
                });

            modelBuilder.Entity("webapi.Models.DND.AllyAndOrganization", b =>
                {
                    b.Navigation("Associations");
                });

            modelBuilder.Entity("webapi.Models.DND.AttackAndSpellcasting", b =>
                {
                    b.Navigation("Associations");
                });

            modelBuilder.Entity("webapi.Models.DND.Equipment", b =>
                {
                    b.Navigation("Associations");
                });

            modelBuilder.Entity("webapi.Models.DND.FeatureAndTrait", b =>
                {
                    b.Navigation("Associations");
                });

            modelBuilder.Entity("webapi.Models.User", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("webapi.Models.DND.DndCharacter", b =>
                {
                    b.Navigation("AllyAndOrganizationAssociations");

                    b.Navigation("AttacksAndSpellcastingAssociations");

                    b.Navigation("EquipmentAssociations");

                    b.Navigation("FeaturesAndTraitsAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
